{
    "title": "Example",
    "t_time": "Time",
    "p_dateobj": "You can use the Date object to get information about the current time.",
    "p_date": "The following example shows a concrete example of how to obtain hours, minutes and seconds.",
    "t_mv": "Mixing mouth and voice input using VTS",
    "li_add": "Add method",
    "p_create": "Create VoiceVolume and VoiceFrequency and change the fusion mode to Add.",
    "p_ref": "Reference or rewrite mouthOpen and mouthSmile respectively in the editor.",
    "p_actual": "At this point, the actual value of VoiceVolume in the VTS is the original value plus the result in Vitamins.Photos",
    "p_note": "Note that the range of VoiceVolume is also affected by addition.",
    "p_origin": "The original range of VoiceVolume in the VTS is [0, 1].",
    "p_morange": "Assuming that the range of mouthOpen is also [0,1], then the actual range of VoiceVolume will change as follows [0,1] + [0,1] = [0,2]. Therefore, you need to change the VoiceVolume range manually when using it in VTS.",
    "p_ratio": "If you want to adjust the ratio when fusing, you can multiply the calculation part by a factor, as here, I want the fusion ratio to be voice:mouth = 1:3",
    "li_vtsparam": "Using the VTS parameter",
    "p_fetch": "With 'Fetch VTS parameter data' enabled, you can accsee the VoiceVolume via vPlugin.vts.defaultParam.VoiceVolume",
    "p_just": "Then just calculate it together with MouthOpen.",
    "bq_twomode": "The latency of the Add method will be lower than that of using the VTS parameter. And the Fetching will pressure the VTS plugin server. Moreover, if you are using other VTS plugins simultaneously, you may induce these plugins to trigger VTS plugin service jitter.",
    "t_sods": "second-order system",
    "p_cratesods": "You can create a second-order system using new vPlugin.SecondOrderSystem(f,z,r).",
    "li_freq": "Where f is the frequency and determines how fast the system change; the higher the value, the faster the system changes.",
    "li_zeta": "z is the damping coefficient, which determines the resistance of the system.",
    "p_z0": "At z=0, the system will oscillate continuously.",
    "p_z01": "At 0 < z < 1, the system will gradually stabilise while oscillating, the larger the z, the smaller the oscillation. ",
    "p_z1": "When z>=1, the system will not oscillate and will converge to the target value in one direction; the larger the z, the longer it takes. ",
    "p_zbest": "If you want a suitable oscillation effect, the recommended range for z is 0.4 to 0.8.",
    "li_res": "r is the response coefficient and determines how the system response to changes at the start.",
    "p_r01": "For 0<=r<=1, the larger the r, the faster the initial response.",
    "p_r1": "For r>1, the initial response is over-rapid and will exceed the target value before converging to the target.",
    "p_r0": "For r<0, the initial response is negative velocity, and the system will head in the opposite direction before converging to the target value.",
    "b_once": "You should create this system only once and store it in the class property. Which you can handle as in the diagram below, ",
    "p_calc": "You can then use this.sods.calc(x) to process the calculation. For example, to calculate the value of FaceAngleX updated by the second order system, you can use this.sods.calc(ref.FaceAngleX)."
}