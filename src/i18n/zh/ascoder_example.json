{
    "title": "示例",
    "t_time": "时间",
    "p_dateobj": "你可以使用Date对象获取当前的时间信息",
    "p_date": "下面的示例展示了获取小时 分钟 和秒的具体示例",
    "t_mv": "利用VTS实现嘴与语音输入混合",
    "li_add": "Add方法",
    "p_create": "创建VoiceVolume 和VoiceFrequency，将融合模式改为Add。",
    "p_ref": "在编辑部分分别引用或重新编写 mouthOpen 和mouthSmile。",
    "p_actual": "此时，在VTS内VoiceVolume实际的值就是VTS 的VoiceVolume 和 Vitamins的MouthOpen 相加的结果。",
    "p_note": "注意，此时VoiceVolume的范围也受到了加法影响.",
    "p_origin": "VTS内的VoiceVolume的原范围是【0，1】",
    "p_morange": "假设mouthOpen的范围也是【0，1】，那么此时VoiceVolume的实际范围将发生以下变化 【0，1】+【0,1】=【0，2】。在VTS里使用VoiceVolume时需手动更改VoiceVolume的范围。",
    "p_ratio": "如果你想调整融合时的比例，可以简单的为计算部分乘上一个系数，如这里，我希望融合比例是声音：嘴=1：3",
    "li_vtsparam": "使用VTS parameter",
    "p_fetch": "开启Fetch VTS parameter data 后，你可以通过vPlugin.vts.defaultParam.VoiceVolume 获取VoiceVolume。",
    "p_just": "然后与MouthOpen一起计算即可。",
    "bq_twomode": "Add方法的延时会低于获取VTS parameter。且开启Fetch VTS parameter data 选项会给VTS插件服务器施加较大压力。如果你同时使用其他VTS插件，可能诱发这些插件触发VTS插件服务抖动。",
    "t_sods": "二阶系统",
    "p_cratesods": "你可以使用 new vPlugin.SecondOrderSystem(f,z,r)创建一个二阶系统。",
    "li_freq": "其中f 是频率，决定了系统的频率，数值越高，系统变化的越快。",
    "li_zeta": "z是阻尼系数，决定了系统受到的阻力。",
    "p_z0": "z=0时，系统将不断震荡。",
    "p_z01": "0<z<1时，系统会在震荡的同时逐渐趋于稳定，z越大震荡幅度越小。",
    "p_z1": "当z>=1时，系统将不会震荡，转而在单方向上趋近目标值，z越大，这个过程越漫长。",
    "p_zbest": " 如果你想要一个合适的震荡效果，推荐的z的范围是0.4~0.8。",
    "li_res": "r是响应系数，决定系统在开始时如何响应变化。",
    "p_r01": "0<=r<=1时，r越大，初始响应速度越快。",
    "p_r1": "r>1时，初始响应是过速的，将超过目标值后重新趋近目标。",
    "p_r0": "r<0时，初始响应是负速度的，系统将先朝向反方向，再趋近目标值。",
    "b_once": "您应当保证这个系统只创建一次，您可以向下图一样处理，并存储到自身的类属性sods里。",
    "p_calc": "之后您就可以使用this.sods.calc(x)执行计算了，例如想要计算FaceAngleX经二阶系统更新的值，可以使用this.sods.calc(ref.FaceAngleX)。"
}