{
    "title": "Quick Start",
    "t_exp": "Expression mode",
    "p_inexp": "Editing Param in expression mode is like expressing the relationship between the independent and dependent variables in an equation in middle school; you need to describe the relationship between param and blendshapes in mathematical terms.",
    "t_warmip": "Warm-up",
    "p_simcase": "In the simplest use case, you want to create a param to represent the expression mouthFunnel, which is only related to the blendshape of the same name. The value of the param can simply be equal to the value of the blendshape mouthFunnel.So we fill 'mouthFunnel' to the editor.",
    "t_deeper": "Going deeper",
    "p_usecase": "For a practical use case, you want to create a Param representing the BrowLY, one of the standard Live2D Parameters.",
    "p_browrange": "The range of BrowLY is [-1, 1], and the default value is 0, where the positive direction means up.",
    "p_undire": "Blendshapes are unidirectional, so in this use case, we will need to use at least two blendshapes.",
    "p_posit": "The blendshapes for positive brow direction are 'browInnerUp', 'browOuterUp_L' and 'browOuterUp_R', which are similar in the role, so only one is needed. Obviously, 'browOuterUp_L 'is a good choice to differentiate between the left and right eyebrows.",
    "p_nega": "Similarly, we chose 'browDown_L' to indicate the negative direction.",
    "p_alwaypos": "The value of blendshapes is always positive, so we should add a negative sign to 'browDown_L' when joining these two blendshapes.",
    "p_findrange": "We also use the same calculation as the expression to find the range.",
    "p_01": "[0, 1] - [0, 1] = [-1, 1], default value 0 - 0 = 0",
    "p_rangebecome": "At this point, the range of the param also becomes [-1, 1] as we need it to be, and the default value is exactly 0.",
    "b_further": "You may have a further thought.",
    "p_invts": "In VTS, the default input range for BrowLeftY is [0,1], with a default value of 0.5. If you were to distribute the Vitamins save separately, users would easily miss such a small range problem. Therefore, you will want to change the range to be consistent with the VTS.",
    "P_perform": "You can perform the following operation on the expression we already completed.",
    "b_evenfur": "Taking this even further, ",
    "p_mxbrow": "you want to implement the 'mouth X controls brows', and the model itself doesn't do this implementation via Live2d.",
    "p_mx": "Then in Vitamins you can define the mouth X and blend it with the previous expression in a certain scale, like this.",
    "p_dontchange": "Here we don't need to change the param range because, in this param use case, the eyebrows are the main body, and we want to use the eyebrows themselves to complete the full control of this param. On the other hand, the mouth part is used to enrich the expression and has a default value of 0, which means that it will not affect the param in a visible way when there is no need to use the implementation 'mouth X controls brows'.",
    "t_prog": "Programming mode",
    "p_surper": "Programming mode is a superset of expression mode, and the techniques you learned in expression mode are still available here. In addition, you can switch the code from expression mode to programming mode by clicking on the switch edit mode button.",
    "p_allow": "Programming mode allows you to use a more complex and powerful method to complete your Param edits, achieving Param goals that would be difficult or impossible to achieve in expression mode.",
    "bq_needreturn": "When you write code in Programming mode, you are writing within a function, so you are required to return a value, and if that value is not a number, then an error will occur.",
    "p_want": "If you want to write a Param in programming mode but have no programming experience then I strongly recommend that you read the following pages.",
    "li_var": "Variables",
    "li_Math": "Mathematics",
    "li_condi": "Condition",
    "li_func": "Functions",
    "li_return": "return values"
}