{
    "title": "快速开始",
    "t_exp": "表达式模式",
    "p_inexp": "在表达式模式下编辑参数，就像是中学时期，用等式表达自变量和因变量的关系一样，您需要用数学的语言描述参数和blendshapes的关系。",
    "t_warmip": "热身",
    "p_simcase": "最简单的例子，你想创建一个参数表示mouthFunnel这个表情，这个表情只与同名的blendshape有关，那么参数的值 可以简单的等于 mouthFunnel这个blendshape的值。所以我们在编辑部分仅填入mouthFunnel.",
    "t_deeper": "深入一些",
    "p_usecase": "一个实际的用例，你想创建一个参数表示标准Live2D Parameter中的BrowLY。",
    "p_browrange": "BrowLY的范围是【-1，1】，默认值是0，其中正方向表示向上。",
    "p_undire": "Blendshapes是单方向的，所以在这个用例中，我们至少会需要使用俩个blendshapes。",
    "p_posit": "表示眉毛正方向的blendshapes有'browInnerUp','browOuterUp_L','browOuterUp_R' ， 它们的功能是相似的，所以只需要一个就足够了。显而易见的，为了区别表达左右眉毛，'browOuterUp_L'会是一个不错的选择。",
    "p_nega": "同样的，我们选用’browDown_L‘表示负方向。",
    "p_alwaypos": "blendshapes的值始终为正，所以我们在连接这俩个blendshape时，应该为’browDown_L‘加上负号。",
    "p_findrange": "然后，我们也用与表达式相同的计算求出范围。",
    "p_01": "【0，1】-【0，1】=【-1，1】，默认值 0 - 0 = 0",
    "p_rangebecome": "此时参数的范围也变成了我们需要的【-1，1】，且默认值刚好是0。",
    "b_further": "此时你可能会有更进一步的想法：",
    "p_invts": "在VTS里，默认的BrowLeftY的输入范围是【0，1】默认值0.5。如果您准备单独分发Vitamins 脚本文件的话，用户在使用时会很容易遗漏这样的范围问题。于是你会想要将范围修改为与VTS一致。",
    "P_perform": "那么你可以对已经完成的计算执行以下操作。",
    "b_evenfur": "再进一步, ",
    "p_mxbrow": "你想要实现嘴X控制眉毛变化，而模型本身并没有通过Live2d做到这个实现。",
    "p_mx": "那么在Vitamins里，你可以表示出嘴X，并以一定的比例与之前的表达式混合，就像这样：",
    "p_dontchange": "这里我们不用改变参数的范围，因为在这个参数的用例里，眉毛是主体，我们希望使用眉毛本身就可以完成对这个参数的控制。而嘴的部分是用来丰富表达的，且刚好默认值是0，这意味着，在无需使用’嘴X控制眉毛‘这个实现时，它不会对参数构成可见的影响。",
    "t_prog": "编程模式",
    "p_surper": "编程模式是表达式模式的一个超集，你在表达式模式中学到的技巧在这里仍然可以使用。您可以点击切换编辑模式按钮，将表达式模式下的代码切换到编程模式中。",
    "p_allow": "编程模式下你可以使用更复杂、强大的方式完成对参数的编辑，实现在表达式模式下很难或无法实现的参数目标。",
    "bq_needreturn": "当你在编程模式下编写代码时，实际上是在一个函数内编写，因此需要您返回（return)一个值，如果这个值不是数字，那么就会出错。",
    "p_want": "如果你想要使用编程计算模式编写参数，但是没有编程经验，那么我强烈建议您阅读以下链接内的内容。",
    "li_var": "变量",
    "li_Math": "数学",
    "li_condi": "条件语句",
    "li_func": "函数",
    "li_return": "返回值"
}